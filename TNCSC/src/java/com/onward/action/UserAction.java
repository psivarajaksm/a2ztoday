/* * To change this template, choose Tools | Templates * and open the template in the editor.   */package com.onward.action;import com.google.inject.Guice;import com.google.inject.Injector;import com.onward.common.BinaryCodec;import com.onward.common.DateUtility;import com.onward.common.HibernateUtil;import com.onward.valueobjects.UserViewModel;import java.lang.reflect.InvocationTargetException;import java.security.InvalidKeyException;import java.security.NoSuchAlgorithmException;import java.text.ParseException;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Map;import java.util.Calendar;import java.util.LinkedHashMap;import javax.crypto.BadPaddingException;import javax.crypto.IllegalBlockSizeException;import javax.crypto.NoSuchPaddingException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.beanutils.BeanUtils;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.validator.DynaValidatorForm;import org.hibernate.Criteria;import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.Transaction;import org.hibernate.criterion.Restrictions;import com.onward.common.ApplicationConstants;import com.onward.common.CommonUtility;import com.onward.common.DateParser;import com.onward.dao.EmployeeMasterService;import com.onward.dao.OeslModule;//import com.onward.persistence.masters.Institutionmaster;//import com.onward.persistence.masters.Suppliermaster;//import com.onward.persistence.options.Referencecodes;import com.onward.dao.UserTypeService;import com.onward.persistence.payroll.Employeeepfmaster;import com.onward.persistence.payroll.Employeemaster;import com.onward.persistence.payroll.Logincount;import com.onward.persistence.payroll.Menumaster;import com.onward.persistence.payroll.Menuprivilages;import com.onward.persistence.payroll.Passwordhistory;import com.onward.persistence.payroll.PasswordhistoryId;import com.onward.persistence.payroll.Usermaster;import com.onward.persistence.payroll.Useroperatingrights;import com.onward.persistence.payroll.Usertype;import java.math.BigDecimal;import javax.crypto.spec.SecretKeySpec;import javax.crypto.Cipher;import javax.crypto.KeyGenerator;import java.security.Key;import java.text.DecimalFormat;import java.text.NumberFormat;import java.util.HashMap;import java.util.Iterator;import java.util.StringTokenizer;import org.hibernate.criterion.Order;/** * * * * @author Jagan Mohan. B * */public class UserAction extends OnwardAction {    private Key key1 = null;    DateParser dateParser = new DateParser();    OeslModule notOnWeekendsModule = new OeslModule();    Injector injector = Guice.createInjector(notOnWeekendsModule);    EmployeeMasterService EmployeeMasterServiceObj = (EmployeeMasterService) injector.getInstance(EmployeeMasterService.class);    UserTypeService usertypeServiceObj = (UserTypeService) injector.getInstance(UserTypeService.class);    /**     *     *     *     * @param mapping     *     * @param form     *     * @param request     *     * @param response     *     * @return     *     */    public ActionForward indexPage(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        UserViewModel userObj = (UserViewModel) request.getSession(false).getAttribute("userDetails");        String currentusermodule = (String) request.getSession(false).getAttribute("currentusermodule");        if (currentusermodule == null || currentusermodule.isEmpty() || currentusermodule.length() <= 0) {            currentusermodule = "0";        }        request.setAttribute("productHTML", getIndexProducts(userObj.getUserid(), currentusermodule));        userObj = null;        return mapping.findForward("indexPage");    }    /**     *     *     *     * @param mapping     *     * @param form     *     * @param request     *     * @param response     *     * @return     *     */    public ActionForward profileUpdationPage(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        return mapping.findForward("profileUpdationPage");    }    /**     *     *     *     * @param mapping     *     * @param form     *     * @param request     *     * @param response     *     * @return     *     */    public ActionForward changePasswordPage(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        request.setAttribute("NORMAL_FORCE", "N");        return mapping.findForward("changePasswordPage");    }    /**     *     *     *     * @param mapping     *     * @param form     *     * @param request     *     * @param response     *     * @return     *     */    public ActionForward userStatusModificationPage(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        return mapping.findForward("userStatusModificationPage");    }    /**     *     * This method used for forward to Login Page     *     *     *     * @param mapping     *     * @param form     *     * @param request     *     * @param response     *     * @return /WEB-INF/login/LoginPage.jsp     *     */    public ActionForward userCreationPage(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        return mapping.findForward("userCreationPage");    }    public ActionForward menuPrivilegesCreationPage(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {//        System.out.println("**************************** UserAction class menuPrivilegesCreationPage method is calling ***********************");        Map map = new HashMap();        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        Criteria criteria = null;        try {            criteria = hibernate_session.createCriteria(Usertype.class);//            criteria.add(Restrictions.ne("id", 0));            List userlist = criteria.list();//            System.out.println("userlist.size() = " + userlist.size());            StringBuffer buffer = new StringBuffer();            if (userlist.size() > 0) {                buffer.append("<select ");                buffer.append("class=\"combobox\" ");                buffer.append("name=\"usertype\" id=\"usertype\" onchange=\"getMenus(this.value)\" >");                buffer.append("<option value=\"");                buffer.append("0");                buffer.append("\">");                buffer.append("----------Select----------");                buffer.append("</option>");                for (int i = 0; i < userlist.size(); i++) {                    Usertype usertype = (Usertype) userlist.get(i);                    buffer.append("<option value=\"");                    buffer.append(usertype.getId());                    buffer.append("\">");                    buffer.append(usertype.getUsertypename());                    buffer.append("</option>");                }                buffer.append("</select>");            }            criteria = hibernate_session.createCriteria(Menumaster.class);//            criteria.add(Restrictions.ne("parentcode", 0));            criteria.add(Restrictions.ne("methodname", ""));            criteria.add(Restrictions.sqlRestriction("isvisible is true"));            criteria.addOrder(Order.asc("parentcode"));            criteria.addOrder(Order.asc("menuorder"));            List menulist = criteria.list();            System.out.println("menulist.size() = " + menulist.size());            StringBuffer menubuffer = new StringBuffer();            if (menulist.size() > 0) {                menubuffer.append("<table width=\"85%\" align=\"center\" class=\"tableBorder\" border=\"0\" cellpadding=\"0\" cellspacing=\"1\">");                menubuffer.append("<tr>");                menubuffer.append("<td valign=\"top\">");                menubuffer.append("<table width=\"100%\" align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"1\">");                menubuffer.append("<tr class=\"gridmenu\">");                menubuffer.append("<td align=\"center\">Sno</td>");                menubuffer.append("<td align=\"center\">Menu Label Name</td>");                menubuffer.append(" <td align=\"center\">Accessible</td>");                menubuffer.append("</tr>");                for (int i = 0; i < menulist.size(); i++) {                    String className = "";                    className = (i % 2 == 0) ? "rowColor1" : "rowColor2";                    Menumaster menumaster = (Menumaster) menulist.get(i);//                    System.out.println((i + 1) + "\t" + menumaster.getCode() + "\t" + menumaster.getLabelname());                    menubuffer.append("<tr class=\"" + className + "\">");                    menubuffer.append("<td align=\"center\">" + (i + 1) + "</td>");                    menubuffer.append("<td align=\"left\" style=\"padding-left:5px;\">" + menumaster.getLabelname() + "</td>");                    menubuffer.append("<td align=\"center\"><input type=\"checkbox\" name=\"accessright\" id=\"accessright" + menumaster.getCode() + "\" value=\"" + menumaster.getCode() + "\" /></td>");                    menubuffer.append("</tr>");                }                menubuffer.append("</table>");                menubuffer.append("</td>");                menubuffer.append("</tr>");                menubuffer.append("</table>");            }            map.put("usertypelist", buffer.toString());            map.put("menulist", menubuffer.toString());            request.getSession(false).setAttribute("menumastermap", map);        } catch (Exception ex) {            ex.printStackTrace();        } finally {            hibernate_session.close();        }        return mapping.findForward("menuPrivilegesCreationPage");    }    /**     *     *     *     * @param funType     *     * @param accountNumber     *     * @return     *     */    public Map isUserIdExist(String userId, String regionid) {        Map isUserExistMap = new LinkedHashMap();        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        try {            Criteria employeeCrit1 = hibernate_session.createCriteria(Employeeepfmaster.class);            employeeCrit1.add(Restrictions.sqlRestriction("epfno='" + userId + "'"));            List empList1 = (ArrayList) employeeCrit1.list();            if (empList1.size() > 0) {//               if(employeemasterObj.getRegion().equalsIgnoreCase(regionid)){                Criteria amCrit = hibernate_session.createCriteria(Usermaster.class);                amCrit.add(Restrictions.sqlRestriction(" userid = '" + userId + "' "));                //            amCrit.add(Restrictions.sqlRestriction(" region = '" + regionid + "' "));                List accMasterList = (ArrayList) amCrit.list();                if (accMasterList.size() > 0) {                    isUserExistMap.put("ERROR", "Entered Userid already present");                } else {                    isUserExistMap.put("userid", userId);                }            } else {                Criteria employeeCrit = hibernate_session.createCriteria(Employeemaster.class);                employeeCrit.add(Restrictions.sqlRestriction("epfno='" + userId + "'"));                List empList = (ArrayList) employeeCrit.list();                if (empList.size() > 0) {//                    Employeemaster employeemasterObj = (Employeemaster) empList.get(0);//               if(employeemasterObj.getRegion().equalsIgnoreCase(regionid)){                    Criteria amCrit = hibernate_session.createCriteria(Usermaster.class);                    amCrit.add(Restrictions.sqlRestriction(" userid = '" + userId + "' "));                    //            amCrit.add(Restrictions.sqlRestriction(" region = '" + regionid + "' "));                    List accMasterList = (ArrayList) amCrit.list();                    if (accMasterList.size() > 0) {                        isUserExistMap.put("ERROR", "Entered Userid already present");                    } else {                        isUserExistMap.put("userid", userId);                    }//               }else{//                   isUserExistMap.put("ERROR", "Entered Userid is Not in "+getRegionmaster(hibernate_session, regionid).getRegionname()+" Region");//               }                } else {//                    isUserExistMap.put("ERROR", "NOMaster");                    isUserExistMap.put("ERROR", "Entered Userid is not in EPF Master and Employee Master");                }            }        } catch (Exception ex) {            isUserExistMap.put("ERROR", ex.getMessage());        } finally {            hibernate_session.close();        }        return isUserExistMap;    }    /**     *     * This method used for get the userid details based on userid, usertype,     *     * district and exchangecode.     *     *     *     * @param userid User Id     *     * @param usertype A,E,C     *     * @param flag     *     * @param request     *     * @return This method return if Entered used id correct get the user     *     * details else error message.     *     * @throws java.lang.Exception     *     */    public Map getUserIdDetails(String userid, String usertype, String flag, String regionid, HttpServletRequest request) throws Exception {        Map useridMap = new LinkedHashMap();        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        String usertyprids = "";        try {            UserViewModel userObj = (UserViewModel) request.getSession(false).getAttribute("userDetails");            if (userObj != null) {                userObj.getUserid();                userObj = null;            }            Criteria amCrit = hibernate_session.createCriteria(Usermaster.class);            amCrit.add(Restrictions.sqlRestriction(" userid = '" + userid + "' "));            amCrit.add(Restrictions.sqlRestriction(" region = '" + regionid + "' "));            List userMasterList = (ArrayList) amCrit.list();            if (userMasterList.size() > 0) {                Usermaster userMasterObj = (Usermaster) userMasterList.get(0);                useridMap.putAll(BeanUtils.describe(userMasterObj));                useridMap.put("dateofbirth", dateToString(userMasterObj.getDateofbirth()));                useridMap.put("presentstatus", userMasterObj.getUserstatus());                Criteria userCrit = hibernate_session.createCriteria(Useroperatingrights.class);                userCrit.add(Restrictions.sqlRestriction(" userid = '" + userid + "' "));                userCrit.add(Restrictions.sqlRestriction(" accessright is true"));                List userrightsList = (ArrayList) userCrit.list();                if (userrightsList.size() > 0) {                    for (int i = 0; i < userrightsList.size(); i++) {                        Useroperatingrights userrightsObj = (Useroperatingrights) userrightsList.get(i);                        usertyprids = usertyprids + userrightsObj.getUsertypeid() + ",";                    }                }            } else {                useridMap.put("ERROR", "Given Userid Not in this Region");            }            useridMap.put("usertyprids", usertyprids);            useridMap.put("usertypridsize", usertyprids.length());        } catch (Exception ex) {            useridMap.put("ERROR", ex.getMessage());        } finally {            hibernate_session.close();        }        return useridMap;    }    /**     *     *     *     * @param mapping     *     * @param form     *     * @param request     *     * @param response     *     * @return     *     * @throws java.lang.Exception     *     */    public ActionForward userStusUpdationDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {        DynaValidatorForm formObj = (DynaValidatorForm) form;        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        Transaction transaction = null;        Map userMap = new LinkedHashMap();        try {            transaction = hibernate_session.beginTransaction();            java.sql.Date dbToDaysDate = new java.sql.Date(new Date().getTime());            String toDayDate = dateToString(dbToDaysDate);            // Encrypt the Password            byte[] encryptPassword = null;            byte[] encryptPasswordKey = null;            KeyGenerator keyGenerator = KeyGenerator.getInstance("DESede");            if (keyGenerator != null) {                keyGenerator.init(112);                key1 = keyGenerator.generateKey();                encryptPasswordKey = key1.getEncoded();            }            Cipher cipher = Cipher.getInstance("DESede/ECB/PKCS5Padding");            cipher.init(Cipher.ENCRYPT_MODE, key1);            encryptPassword = cipher.doFinal(ApplicationConstants.DEFAULT_PASSWORD.getBytes());            String statusType = (String) formObj.get("statustype");            String userid = (String) formObj.get("userid");            String userstatus = (String) formObj.get("userstatus");            Criteria amCrit = hibernate_session.createCriteria(Usermaster.class);            amCrit.add(Restrictions.sqlRestriction(" userid = '" + userid + "' "));            List userMasterList = (ArrayList) amCrit.list();//            System.out.println("userMasterList===" + userMasterList.size());            Usermaster userMasterObj = new Usermaster();            if (userMasterList.size() > 0) {                userMasterObj = (Usermaster) userMasterList.get(0);                if (statusType.equalsIgnoreCase("1")) {// Status Modification                    if (userstatus.equalsIgnoreCase("1")) {                        userMasterObj.setEncryptpassword(CommonUtility.convertByteToHexString(encryptPassword));                        userMasterObj.setSecretkey(CommonUtility.convertByteToHexString(encryptPasswordKey));//                        userMasterObj.setEncryptpassword(encryptPassword);//                        userMasterObj.setSecretekey(encryptPasswordKey);                        userMasterObj.setUserstatus(intValue(userstatus));                    } else if (userstatus.equalsIgnoreCase(ApplicationConstants.ACTIVE_STATUS) || userstatus.equalsIgnoreCase(ApplicationConstants.DISABLED_STATUS) || userstatus.equalsIgnoreCase(ApplicationConstants.DELETE_STATUS)) {                        userMasterObj.setUserstatus(intValue(userstatus));                    }                } else if (statusType.equalsIgnoreCase("2")) { // User Data Modification                } else if (statusType.equalsIgnoreCase("3")) { // Reset Password//                    userMasterObj.setEncryptpassword(encryptPassword);//                    userMasterObj.setSecretekey(encryptPasswordKey);                    userMasterObj.setEncryptpassword(CommonUtility.convertByteToHexString(encryptPassword));                    userMasterObj.setSecretkey(CommonUtility.convertByteToHexString(encryptPasswordKey));                    userMasterObj.setUserstatus(intValue(ApplicationConstants.ACTIVE_STATUS));                } else if (statusType.equalsIgnoreCase("4")) { // User Rights                }                Map params = request.getParameterMap();                Iterator i = params.keySet().iterator();                while (i.hasNext()) {                    String key = (String) i.next();                    //                  System.out.println("key==="+key);                    String value = ((String[]) params.get(key))[ 0];                    //                  System.out.println("value==="+value);                    userMap.put(key, value);                }                BeanUtils.copyProperties(userMasterObj, userMap);//                BeanUtils.copyProperties(userMasterObj, request.getParameterMap());                hibernate_session.update(userMasterObj);            }            Logincount insertLoginCount = new Logincount();            insertLoginCount.setUserid(userid);            insertLoginCount.setCount(0);            hibernate_session.update(insertLoginCount);            try {                transaction.commit();            } catch (Exception e) {                if (transaction != null) {                    transaction.rollback();                }            }            hibernate_session.flush();            hibernate_session.clear();            if (statusType.equalsIgnoreCase("2")) { // User Data Modification                Criteria userCrit = hibernate_session.createCriteria(Useroperatingrights.class);                userCrit.add(Restrictions.sqlRestriction("userid='" + userid + "'"));                List userList = userCrit.list();                if (userList.size() > 0) {                    for (int i = 0; i < userList.size(); i++) {                        Useroperatingrights userObj = (Useroperatingrights) userList.get(i);                        transaction = hibernate_session.beginTransaction();                        userObj.setAccessright(Boolean.FALSE);                        hibernate_session.merge(userObj);                        try {                            transaction.commit();                        } catch (Exception e) {                            if (transaction != null) {                                transaction.rollback();                            }                        }                    }                }                String usertypeids = (String) request.getParameter("usertypeids");                StringTokenizer str = new StringTokenizer(usertypeids, ",");                while (str.hasMoreTokens()) {                    int usertypeid = Integer.parseInt(str.nextToken());                    Criteria userCrit1 = hibernate_session.createCriteria(Useroperatingrights.class);                    userCrit1.add(Restrictions.sqlRestriction("userid='" + userid + "'"));                    userCrit1.add(Restrictions.sqlRestriction("usertypeid=" + usertypeid));                    List userList1 = userCrit1.list();                    if (userList1.size() > 0) {                        Useroperatingrights userObj = (Useroperatingrights) userList1.get(0);                        transaction = hibernate_session.beginTransaction();                        userObj.setAccessright(Boolean.TRUE);                        hibernate_session.merge(userObj);                        try {                            transaction.commit();                        } catch (Exception e) {                            if (transaction != null) {                                transaction.rollback();                            }                        }                    } else {                        Transaction transactionnew = hibernate_session.beginTransaction();                        Usermaster userobj = new Usermaster();                        userobj.setUserid(userid);                        Useroperatingrights rightsObj = new Useroperatingrights();                        rightsObj.setId(getSequenceNumber(hibernate_session));                        rightsObj.setUsermaster(userobj);                        rightsObj.setUsertypeid(usertypeid);                        rightsObj.setAccessright(Boolean.TRUE);                        hibernate_session.saveOrUpdate(rightsObj);                        try {                            transactionnew.commit();                        } catch (Exception e) {                            if (transactionnew != null) {                                transactionnew.rollback();                            }                        }                    }                }            }            if (statusType.equalsIgnoreCase("1")) {                userid = " User Status Sucessfully Changed With Userid : " + userid;            } else if (statusType.equalsIgnoreCase("2")) {                userid = " User Data Modified Sucessfully With Userid : " + userid;            } else if (statusType.equalsIgnoreCase("3")) {                userid = " Reset Password Sucessfully Changed With Userid : " + userid + " AND Password is " + ApplicationConstants.DEFAULT_PASSWORD;            } else if (statusType.equalsIgnoreCase("4")) {                userid = " User Rights Sucessfully Changed With Userid : " + userid;            }            request.setAttribute("message", userid);        } catch (Exception ex) {            ex.printStackTrace();            request.setAttribute("message", ex.getMessage());        } finally {            hibernate_session.close();        }        return mapping.findForward("userStatusModificationPage");    }    /**     *     *     *     * @param mapping     *     * @param form     *     * @param request     *     * @param response     *     * @return     *     * @throws java.lang.Exception     *     */    public ActionForward saveUserCreationDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {        DynaValidatorForm formObj = (DynaValidatorForm) form;        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        byte[] encryptPassword = null;        byte[] encryptPasswordKey = null;        Map userMap = new LinkedHashMap();        try {            UserViewModel userObj = (UserViewModel) request.getSession(false).getAttribute("userDetails");            Transaction transaction = hibernate_session.beginTransaction();            java.sql.Date dbToDaysDate = new java.sql.Date(new Date().getTime());            String toDayDate = dateToString(dbToDaysDate);            String password = (formObj.get("password").toString());            String userid = (formObj.get("userid").toString());            String username = (formObj.get("username").toString());            String regionid = (formObj.get("regionid").toString());            // Encrypt the Password            KeyGenerator keyGenerator = KeyGenerator.getInstance("DESede");            if (keyGenerator != null) {                keyGenerator.init(112);                key1 = keyGenerator.generateKey();                encryptPasswordKey = key1.getEncoded();            }            Cipher cipher = Cipher.getInstance("DESede/ECB/PKCS5Padding");            cipher.init(Cipher.ENCRYPT_MODE, key1);            encryptPassword = cipher.doFinal(password.getBytes());            /**             *             * Below code used for Insert the User Profile date into User Master             *             * Table.             *             */            Map params = request.getParameterMap();            Iterator i = params.keySet().iterator();            while (i.hasNext()) {                String key = (String) i.next();//                  System.out.println("key==="+key);                String value = ((String[]) params.get(key))[ 0];//                  System.out.println("value==="+value);                userMap.put(key, value);            }            Usermaster userMasterObj = new Usermaster();            userMasterObj.setCreatedby(userObj.getUserid());            userMasterObj.setCreateddate(dbToDaysDate);            userMasterObj.setNextpwddate(postgresDate(DateUtility.addToDate(toDayDate, Calendar.YEAR, 1)));            userMasterObj.setSequencenumber(1);            userMasterObj.setUserstatus(intValue(ApplicationConstants.NEW_STATUS));            userMasterObj.setRegion(regionid);//            userMasterObj.setUsertype(ApplicationConstants.ADMIN_USER);//            userMasterObj.setEncryptpassword(encryptPassword);//            userMasterObj.setSecretekey(encryptPasswordKey);            userMasterObj.setEncryptpassword(CommonUtility.convertByteToHexString(encryptPassword));            userMasterObj.setSecretkey(CommonUtility.convertByteToHexString(encryptPasswordKey));            userMasterObj.setEmployeemaster(getEmployeemaster(hibernate_session, userid, regionid));            /**             *             * Below code used for Insert the Password Count date into Password             *             * History Table.             *             */            Passwordhistory passwordhistory = new Passwordhistory();            passwordhistory.setId(new PasswordhistoryId(userid, 1));            passwordhistory.setCreatedby(userObj.getUserid());            passwordhistory.setCreateddate(dbToDaysDate);            passwordhistory.setNextpwddate(postgresDate(DateUtility.addToDate(toDayDate, Calendar.YEAR, 1)));            passwordhistory.setUserstatus(intValue(ApplicationConstants.ACTIVE_STATUS));//            passwordhistory.setUsertype(ApplicationConstants.ADMIN_USER);            passwordhistory.setEncryptpassword(encryptPassword);            passwordhistory.setSecretekey(encryptPasswordKey);            /**             *             * Below code used for insert the login count data into Login Count             *             * table.             *             */            Logincount logincount = new Logincount();            logincount.setUserid(userid);            logincount.setCount(0);            logincount.setLogindate(dbToDaysDate);            logincount.setCreateddate(dbToDaysDate);            logincount.setCreatedby(userObj.getUserid());            hibernate_session.saveOrUpdate(logincount);            BeanUtils.copyProperties(userMasterObj, userMap);            BeanUtils.copyProperties(passwordhistory, userMasterObj);//            Loginusermaster userMasterObj1 = new Loginusermaster();////            BeanUtils.copyProperties(userMasterObj1, userMasterObj);//            userMasterObj1.setEmployeeepfmaster(getEmployeemasterWithoutRegion(hibernate_session, userid));////            Userpasswordhistory userpasswordObj1 = new Userpasswordhistory();//            userpasswordObj1.setId(new UserpasswordhistoryId(userid, 1));//            BeanUtils.copyProperties(userpasswordObj1, userMasterObj1);//            userpasswordObj1.setEmployeeepfmaster(getEmployeemasterWithoutRegion(hibernate_session, userid));            hibernate_session.save(userMasterObj);            hibernate_session.save(passwordhistory);//            hibernate_session.save(userMasterObj1);//            hibernate_session.save(userpasswordObj1);            request.setAttribute("message", "User id Created Sucessfully");            try {                transaction.commit();            } catch (Exception e) {                if (transaction != null) {                    transaction.rollback();                }            }        } catch (Exception ex) {            ex.printStackTrace();            request.setAttribute("message", "User id Creation Fail");        } finally {            hibernate_session.close();        }        return mapping.findForward("userCreationPage");    }    /**     *     * This method used for create the New user at the time Institution &     *     * Supplier master Creation time.     *     *     *     * @param hibernate_session     *     * @param userMap     *     * @throws java.security.NoSuchAlgorithmException     *     * @throws javax.crypto.NoSuchPaddingException     *     * @throws java.security.InvalidKeyException     *     * @throws javax.crypto.IllegalBlockSizeException     *     * @throws javax.crypto.BadPaddingException     *     * @throws java.text.ParseException     *     * @throws java.lang.IllegalAccessException     *     * @throws java.lang.reflect.InvocationTargetException     *     */    public void createUserProfile(Session hibernate_session, Map userMap) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, ParseException, IllegalAccessException, InvocationTargetException {        byte[] encryptPassword = null;        byte[] encryptPasswordKey = null;        java.sql.Date dbToDaysDate = new java.sql.Date(new Date().getTime());        String toDayDate = dateToString(dbToDaysDate);        String userid = (String) userMap.get("userid");        String password = (String) userMap.get("password");        String username = (String) userMap.get("username");        String salutationtype = (String) userMap.get("salutationtype");        String gender = (String) userMap.get("gender");        String dateofbirth = (String) userMap.get("dateofbirth");        String address = (String) userMap.get("address");        String mobilenumber = (String) userMap.get("mobilenumber");        //String fathername = (String) userMap.get("fathername");        //String designation = (String) userMap.get("designation");        String emailid = (String) userMap.get("emailid");//        String usertype = (String) userMap.get("usertype");        String secretquestionone = (String) userMap.get("secretquestionone");        String youranswerone = (String) userMap.get("youranswerone");        String secretquestiontwo = (String) userMap.get("secretquestiontwo");        String youranswertwo = (String) userMap.get("youranswertwo");        String regionid = (String) userMap.get("region");        //String favouritecolor = (String) userMap.get("favouritecolor");        // Encrypt the Password        KeyGenerator keyGenerator = KeyGenerator.getInstance("DESede");        if (keyGenerator != null) {            keyGenerator.init(112);            key1 = keyGenerator.generateKey();            encryptPasswordKey = key1.getEncoded();        }        Cipher cipher = Cipher.getInstance("DESede/ECB/PKCS5Padding");        cipher.init(Cipher.ENCRYPT_MODE, key1);        encryptPassword = cipher.doFinal(password.getBytes());        /**         *         * Below code used for Insert the User Profile date into User Master         *         * Table.         *         */        Usermaster userMasterObj = new Usermaster();        userMasterObj.setUserid(userid);        userMasterObj.setSequencenumber(1);        userMasterObj.setSalutationtype(salutationtype);        userMasterObj.setUsername(username);        userMasterObj.setUsershortname("");        userMasterObj.setGender(gender);        userMasterObj.setDateofbirth(postgresDate(dateofbirth));        userMasterObj.setAddress(address);        userMasterObj.setMobilenumber(mobilenumber);        userMasterObj.setFathername("");        userMasterObj.setDesignation("");        userMasterObj.setEmailid(emailid);        userMasterObj.setUserstatus(intValue(ApplicationConstants.NEW_STATUS));        userMasterObj.setNextpwddate(postgresDate(DateUtility.addToDate(toDayDate, Calendar.YEAR, 1)));        //userMasterObj.setUsertype(usertype);        userMasterObj.setEncryptpassword(CommonUtility.convertByteToHexString(encryptPassword));        userMasterObj.setSecretkey(CommonUtility.convertByteToHexString(encryptPasswordKey));//        userMasterObj.setEncryptpassword(encryptPassword);//        userMasterObj.setSecretekey(encryptPasswordKey);        userMasterObj.setSecretquestionone(secretquestionone);        userMasterObj.setYouranswerone(youranswerone);        userMasterObj.setSecretquestiontwo(secretquestiontwo);        userMasterObj.setYouranswertwo(youranswertwo);        userMasterObj.setFavouritecolor("");        userMasterObj.setCreatedby(userid);        userMasterObj.setCreateddate(dbToDaysDate);        userMasterObj.setEmployeemaster(getEmployeemaster(hibernate_session, userid, regionid));        /**         *         * Below code used for Insert the Password Count date into Password         *         * History Table.         *         */        Passwordhistory passwordhistory = new Passwordhistory();        passwordhistory.setId(new PasswordhistoryId(userid, 1));        passwordhistory.setCreatedby(userid);        passwordhistory.setCreateddate(dbToDaysDate);        passwordhistory.setNextpwddate(postgresDate(DateUtility.addToDate(toDayDate, Calendar.YEAR, 1)));        passwordhistory.setUserstatus(intValue(ApplicationConstants.ACTIVE_STATUS));        //passwordhistory.setUsertypeid(usertype);        passwordhistory.setEncryptpassword(encryptPassword);        passwordhistory.setSecretekey(encryptPasswordKey);        /**         *         * Below code used for insert the login count data into Login Count         *         * table.         *         */        Logincount logincount = new Logincount();        logincount.setUserid(userid);        logincount.setCount(0);        logincount.setLogindate(dbToDaysDate);        logincount.setCreateddate(dbToDaysDate);        logincount.setCreatedby(userid);        hibernate_session.saveOrUpdate(logincount);        BeanUtils.copyProperties(passwordhistory, userMasterObj);        hibernate_session.save(userMasterObj);        hibernate_session.save(passwordhistory);    }    /**     *     *     *     * @param mapping     *     * @param form     *     * @param request     *     * @param response     *     * @return     *     * @throws java.lang.Exception     *     */    public ActionForward changeYourPassword(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        byte[] secreteKey = new byte[168];        byte[] existPassword = null;        byte[] encryptPassword = null;        byte[] encryptPasswordKey = null;        boolean flag = false;        Transaction transaction = null;        try {            transaction = hibernate_session.beginTransaction();            java.sql.Date dbToDaysDate = new java.sql.Date(new Date().getTime());            String toDayDate = dateToString(dbToDaysDate);            UserViewModel userObj = (UserViewModel) request.getSession(false).getAttribute("userDetails");            String userid = userObj.getUserid();            String dateAndTime = getDateAndTime("dd MMMMM yyyy 'at' hh:mm:ss aaa");            DynaValidatorForm formObj = (DynaValidatorForm) form;            String currentpassword = (formObj.get("currentpassword").toString());            String password = (formObj.get("password").toString());            Criteria umCrit = hibernate_session.createCriteria(Usermaster.class);            umCrit.add(Restrictions.eq("userid", userid));            List userMasterList = (ArrayList) umCrit.list();//            Usermaster userMasterObj = new Usermaster();            Usermaster userMasterObj = new Usermaster();            if (userMasterList.size() > 0) {                userMasterObj = (Usermaster) userMasterList.get(0);                secreteKey = CommonUtility.hexStringToByteArray(userMasterObj.getSecretkey());                existPassword = CommonUtility.hexStringToByteArray(userMasterObj.getEncryptpassword());//                secreteKey = userMasterObj.getSecretekey();//                existPassword = userMasterObj.getEncryptpassword();                String nextPwdDate = dateToString(userMasterObj.getNextpwddate());                int seqNumber = userMasterObj.getSequencenumber();                seqNumber = seqNumber + 1;                SecretKeySpec keyToBeUsed = new SecretKeySpec(secreteKey, "DESede");                String decryptPassword = decrypt(BinaryCodec.toAsciiString(existPassword), keyToBeUsed);                //System.out.println(" decryptPassword : "+decryptPassword);                if (decryptPassword.equals(currentpassword)) {                    // Encrypt the Password                    KeyGenerator keyGenerator = KeyGenerator.getInstance("DESede");                    if (keyGenerator != null) {                        keyGenerator.init(112);                        key1 = keyGenerator.generateKey();                        encryptPasswordKey = key1.getEncoded();                    }                    Cipher cipher = Cipher.getInstance("DESede/ECB/PKCS5Padding");                    cipher.init(Cipher.ENCRYPT_MODE, key1);                    encryptPassword = cipher.doFinal(password.getBytes());                    userMasterObj.setNextpwddate(postgresDate(DateUtility.addToDate(nextPwdDate, Calendar.YEAR, 1)));                    userMasterObj.setSequencenumber(seqNumber);                    userMasterObj.setEncryptpassword(CommonUtility.convertByteToHexString(encryptPassword));                    userMasterObj.setSecretkey(CommonUtility.convertByteToHexString(encryptPasswordKey));//                    userMasterObj.setEncryptpassword(encryptPassword);//                    userMasterObj.setSecretekey(encryptPasswordKey);                    userMasterObj.setUserstatus(intValue(ApplicationConstants.ACTIVE_STATUS));                    hibernate_session.save(userMasterObj);                    Passwordhistory passwordhistory = new Passwordhistory();                    passwordhistory.setId(new PasswordhistoryId(userid, seqNumber));                    passwordhistory.setCreatedby(userid);                    passwordhistory.setCreateddate(dbToDaysDate);                    BeanUtils.copyProperties(passwordhistory, userMasterObj);                    hibernate_session.save(passwordhistory);                    flag = true;                    request.setAttribute("message", "Password changed Sucessfully");                } else {                    request.setAttribute("message", "The current password you entered is incorrect");                }            }            userObj = null;            transaction.commit();        } catch (Exception ex) {            ex.printStackTrace();            if (transaction != null) {                transaction.rollback();            }            request.setAttribute("message", ex.getMessage());        } finally {            hibernate_session.close();        }        if (flag) {            UserViewModel userObj = (UserViewModel) request.getSession(false).getAttribute("userDetails");            String currentusermodule = (String) request.getSession(false).getAttribute("currentusermodule");            if (currentusermodule == null || currentusermodule.isEmpty() || currentusermodule.length() <= 0) {                currentusermodule = "0";            }            request.setAttribute("productHTML", getIndexProducts(userObj.getUserid(), currentusermodule));            userObj = null;            return mapping.findForward("indexPage");        } else {            return mapping.findForward("changePasswordPage");        }    }    public String getIndexProducts(String userid, String currentusermodule) {        String classname = "";        String isAccountModule = "No";        StringBuffer resultHTML = new StringBuffer();        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        try {            Criteria rcCriteria = hibernate_session.createCriteria(Useroperatingrights.class);            rcCriteria.add(Restrictions.sqlRestriction("userid = '" + userid + "'"));            rcCriteria.add(Restrictions.sqlRestriction("accessright is true"));            rcCriteria.addOrder(Order.asc("usertypeid"));            List rcList = rcCriteria.list();            resultHTML.append("<table width=\"25%\" align=\"center\" class=\"tableBorder\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">");            resultHTML.append("<tr class=\"mainheader\">");            resultHTML.append("<td align=\"center\">User Types</td>");            resultHTML.append("</tr>");            if (rcList.size() > 0) {                for (int i = 0; i < rcList.size(); i++) {                    if (i % 2 == 0) {                        classname = "rowColor1";                    } else {                        classname = "rowColor2";                    }                    Useroperatingrights referenceCodesObj = (Useroperatingrights) rcList.get(i);                    Criteria userCriteria = hibernate_session.createCriteria(Usertype.class);                    userCriteria.add(Restrictions.sqlRestriction("id = " + referenceCodesObj.getUsertypeid()));                    List userList = userCriteria.list();                    if (userList.size() > 0) {                        Usertype usertypeObj = (Usertype) userList.get(0);                        Criteria privileageCriteria = hibernate_session.createCriteria(Menuprivilages.class);                        privileageCriteria.add(Restrictions.sqlRestriction("usertype = " + usertypeObj.getId()));                        privileageCriteria.add(Restrictions.sqlRestriction("accessright is true"));                        List privileageList = privileageCriteria.list();                        if (privileageList.size() > 0) {                            for (int j = 0; j < privileageList.size(); j++) {                                Menuprivilages menuprivilagesObj = (Menuprivilages) privileageList.get(j);//                                System.out.println("menuprivilagesObj.getMenumaster().getGrouptype()=="+menuprivilagesObj.getMenumaster().getGrouptype());                                if (menuprivilagesObj.getMenumaster().getGrouptype() == null) {                                } else if (menuprivilagesObj.getMenumaster().getGrouptype() == 'A') {                                    isAccountModule = "Yes";                                    break;                                }                            }                        }                        String childCode = "type" + usertypeObj.getId();                        String childCodeDescription = usertypeObj.getUsertypename();                        String checkedFlag = "";                        if (currentusermodule.equalsIgnoreCase(childCode)) {                            checkedFlag = "checked";                        }                        resultHTML.append("<tr class = \"" + classname + "\" >");                        resultHTML.append("<td width=\"100%\" align=\"left\"  valign=\"middle\"><input type=\"radio\"  " + checkedFlag + " name=\"product\" id=\"" + childCode + "\" value=\"" + isAccountModule + "\" onclick=\"setProductType(this);\">&nbsp;<b>" + childCodeDescription + "</b>&nbsp;</td>");                        resultHTML.append("</tr>");                        if (isAccountModule.equalsIgnoreCase("Yes")) {                            isAccountModule = "No";                        }                    }                }            }            resultHTML.append("</table>");        } catch (Exception ex) {            ex.printStackTrace();        } finally {            hibernate_session.close();        }        return resultHTML.toString();    }    public String addPrecision(Object object, String pattern) {        String value = "";        NumberFormat numberFormat = new DecimalFormat(pattern);        BigDecimal bigDecimal = null;        if (object != null) {            value = object.toString();        }        if ((value != null) && !("".equals(value))) {            bigDecimal = new BigDecimal(value);        }        if (bigDecimal != null) {            return numberFormat.format(bigDecimal);        }        return "0.00";    }    /**     *     * This method used for set the product type into user session detial.     *     *     *     * @param mapping     *     * @param form     *     * @param request     *     * @param response     *     * @return     *     * @throws java.lang.Exception     *     */    public ActionForward setProductType(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {        DynaValidatorForm formObj = (DynaValidatorForm) form;        Map resultMap = new HashMap();        String currentusermodule = (String) formObj.get("currentusermodule");        String fyearvalue = (String) formObj.get("fyearvalue");//        System.out.println("fyearvalue=="+fyearvalue);        UserViewModel userObj = (UserViewModel) request.getSession(false).getAttribute("userDetails");        request.getSession(false).setAttribute("currentusermodule", currentusermodule);        if (currentusermodule == null || currentusermodule.isEmpty() || currentusermodule.length() <= 0) {            currentusermodule = "0";        }        request.setAttribute("productHTML", getIndexProducts(userObj.getUserid(), currentusermodule));        resultMap = EmployeeMasterServiceObj.getMenuDetails(null, request, response, null, null, userObj);        request.getSession(false).removeAttribute("menusHTML");        request.getSession(false).setAttribute("menusHTML", resultMap.get("menuhtml").toString());        if (!fyearvalue.equalsIgnoreCase("0")) {            request.getSession(false).removeAttribute("financialYear");            request.getSession(false).setAttribute("financialYear", fyearvalue);        }        return mapping.findForward("indexPage");    }    /*     *     * &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& Start profile updation data     *     * &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&     *     */    /**     *     *     *     * @param userid     *     * @param request     *     * @return     *     * @throws java.lang.Exception     *     */    public Map getProfileUpdateUserData(String userid, HttpServletRequest request) throws Exception {        Map useridMap = new LinkedHashMap();        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        try {            Criteria amCrit = hibernate_session.createCriteria(Usermaster.class);            amCrit.add(Restrictions.sqlRestriction(" userid = '" + userid + "' "));            List userMasterList = (ArrayList) amCrit.list();            if (userMasterList.size() > 0) {                Usermaster userMasterObj = (Usermaster) userMasterList.get(0);                useridMap.putAll(BeanUtils.describe(userMasterObj));                useridMap.put("dateofbirth", dateToString(userMasterObj.getDateofbirth()));                useridMap.put("presentstatus", userMasterObj.getUserstatus());            }        } catch (Exception ex) {            useridMap.put("ERROR", ex.getMessage());        } finally {            hibernate_session.close();        }        if (useridMap == null || useridMap.isEmpty() || useridMap.size() <= 0) {            useridMap = null;        }        return useridMap;    }    /**     *     *     *     * @param mapping     *     * @param form     *     * @param request     *     * @param response     *     * @return     *     * @throws java.lang.Exception     *     */    public ActionForward updateProfileDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {        DynaValidatorForm formObj = (DynaValidatorForm) form;        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        Transaction transaction = null;        try {            transaction = hibernate_session.beginTransaction();            java.sql.Date dbToDaysDate = new java.sql.Date(new Date().getTime());            String toDayDate = dateToString(dbToDaysDate);            String userid = (formObj.get("userid").toString());            Criteria amCrit = hibernate_session.createCriteria(Usermaster.class);            amCrit.add(Restrictions.sqlRestriction(" userid = '" + userid + "' "));            List userMasterList = (ArrayList) amCrit.list();            if (userMasterList.size() > 0) {                Usermaster userMasterObj = (Usermaster) userMasterList.get(0);                userMasterObj.setEmployeemaster(getEmployeemasterWithoutRegion(hibernate_session, userid));                BeanUtils.copyProperties(userMasterObj, request.getParameterMap());                hibernate_session.saveOrUpdate(userMasterObj);            }            request.setAttribute("message", "Profile data update sucessfully");            transaction.commit();        } catch (Exception ex) {            ex.printStackTrace();            if (transaction != null) {                transaction.rollback();            }            request.setAttribute("message", "Profile data updation fail");        } finally {            hibernate_session.close();        }        return mapping.findForward("profileUpdationPage");    }    public Map getMenuDetails(HttpServletRequest request, HttpServletResponse response) {        UserViewModel userObj = (UserViewModel) request.getSession(false).getAttribute("userDetails");        return EmployeeMasterServiceObj.getMenuDetails(null, request, response, null, null, userObj);    }    /**     *     *     *     * @param request     *     * @param response     *     * @return It Returns map.Map Contains List of existing Region Details.     *     */    public Map getUsertypes(HttpServletRequest request, HttpServletResponse response) {        return usertypeServiceObj.getUsertypes(null, request, response, null, null);    }    public Map getAssignedMenus(String usertype, HttpServletRequest request, HttpServletResponse response) {        return usertypeServiceObj.getAssignedMenus(null, request, response, null, null, usertype);    }    public Map saveMenuAssign(String usertype, String menucodes, HttpServletRequest request, HttpServletResponse response) {        return usertypeServiceObj.saveMenuAssign(null, request, response, null, null, usertype, menucodes);    }    public Map getUserTypeSize(HttpServletRequest request, HttpServletResponse response) {        return usertypeServiceObj.getUserTypeSize(null, request, response, null, null);    }    public int getSequenceNumber(Session session) {        int maxSequenceNumber = 1;        try {            StringBuffer sb = new StringBuffer();            sb.append("select max(cast(id as INTEGER)) as maxsequencenumber from useroperatingrights");            List imlist = session.createSQLQuery(sb.toString()).list();            if (imlist.size() > 0) {                if (imlist.get(0) != null) {                    maxSequenceNumber = (Integer) imlist.get(0);                    maxSequenceNumber = maxSequenceNumber + 1;                } else {                    maxSequenceNumber = 1;                }            } else {                maxSequenceNumber = 1;            }        } catch (Exception ex) {            ex.printStackTrace();        }        return maxSequenceNumber;    }    public Map loadRegionDetails(HttpServletRequest request, HttpServletResponse response) {        return usertypeServiceObj.loadRegionDetails(null, request, response, null, null);    }    public Map FinacialYearStatus(String fyearvalue, HttpServletRequest request, HttpServletResponse response) {        Map resultMap = new HashMap();        if (!fyearvalue.equalsIgnoreCase("0")) {            request.getSession(false).removeAttribute("financialYear");            request.getSession(false).setAttribute("financialYear", fyearvalue);            resultMap.put("success", "success");        }        return resultMap;    }}