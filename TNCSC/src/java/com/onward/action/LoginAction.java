/*  * To change this template, choose Tools | Templates * and open the template in the editor.   */ package com.onward.action;    import com.google.inject.Guice;import com.google.inject.Injector;import java.sql.Connection; import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import com.onward.dao.OnwardDAO;import com.onward.common.ApplicationConstants;import com.onward.common.BinaryCodec;import com.onward.common.CommonUtility;import com.onward.common.DateUtility;import com.onward.common.HibernateUtil;import com.onward.common.UnicodeFormatter;import com.onward.dao.EmployeeMasterService;import com.onward.dao.OeslModule;import com.onward.persistence.payroll.Logincount;import com.onward.persistence.payroll.Passwordhistory;import com.onward.persistence.payroll.PasswordhistoryId;import com.onward.persistence.payroll.Regionmaster;import com.onward.persistence.payroll.Usermaster;import com.onward.persistence.payroll.Useroperatingrights;import com.onward.persistence.payroll.Usertype;import com.onward.util.AppProps;import com.onward.valueobjects.UserViewModel;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Map;import java.util.Calendar;import java.util.Enumeration;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.logging.Level;import java.util.logging.Logger;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.beanutils.BeanUtils;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.validator.DynaValidatorForm;import org.hibernate.Criteria;import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.Transaction;import org.hibernate.criterion.Restrictions;import javax.crypto.spec.SecretKeySpec;import javax.crypto.Cipher;import javax.crypto.KeyGenerator;import java.security.Key;public class LoginAction extends OnwardAction {    private Key key1 = null;    OeslModule notOnWeekendsModule = new OeslModule();    Injector injector = Guice.createInjector(notOnWeekendsModule);    EmployeeMasterService EmployeeMasterServiceObj = (EmployeeMasterService) injector.getInstance(EmployeeMasterService.class);    /**     * This method used for forward to Login Page     *     * @param mapping     * @param form     * @param request     * @param response     * @return /WEB-INF/login/LoginPage.jsp     */    public ActionForward loginPage(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        sessionRemove(request, response);        return mapping.findForward("loginPage");    }    /**     *     * @param mapping     * @param form     * @param request     * @param response     * @return     */    public ActionForward forgotPasswordPage(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        return mapping.findForward("forgotPasswordPage");    }    /**     * This method used for set the Menu details in session.     *     * @param menuId     * @param subMenuId     * @param request     */    public void setMenuDetails(String menuId, String subMenuId, HttpServletRequest request) {        request.getSession(false).setAttribute("menuId", menuId);        request.getSession(false).setAttribute("subMenuId", subMenuId);    }        /**     * This method used for remove the session Attributes and Cookies.     *     * @param request     * @param response     */    public void sessionRemove(HttpServletRequest request, HttpServletResponse response) {        request.getSession(false).removeAttribute("userDetails");        request.getSession(false).removeAttribute("menuId");        request.getSession(false).removeAttribute("subMenuId");        /**         * Remove the Session Object.         */        Enumeration enumSessionObj = request.getSession(false).getAttributeNames();        while (enumSessionObj.hasMoreElements()) {            String enumObj = enumSessionObj.nextElement().toString();            request.getSession(false).removeAttribute(enumObj);        }        /**         * Remove the Cookies.         */        Cookie[] cookies = request.getCookies();        for (int i = 0; i < cookies.length; i++) {            Cookie delCookie = cookies[i];            delCookie.setMaxAge(0);        }    }    /**     *     * @param mapping     * @param form     * @param request     * @param response     * @return     */    public ActionForward goToLogin(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        DynaValidatorForm formObj = (DynaValidatorForm) form;        String userid = (formObj.get("userid").toString());        String password = (formObj.get("password").toString());        HashMap loginMap = getLoginDetailsMap(userid, password);        String ERROR = (String) loginMap.get("ERROR");        String statusFlag = (String) loginMap.get("statusFlag");        UserViewModel userviewmodel = (UserViewModel) loginMap.get("USERVM");        if (ERROR != null && !ERROR.isEmpty() && ERROR.length() > 0) {            request.setAttribute("message", ERROR);            //request.setAttribute("message", getTamil());            return mapping.findForward("loginPage");        } else {            request.getSession().setAttribute("userDetails", userviewmodel);            if (statusFlag.equalsIgnoreCase("Y")) {                request.setAttribute("NORMAL_FORCE", "F");                return mapping.findForward("changePasswordPage");            } else {                //request.getSession(true).setAttribute("userDetails", userviewmodel);//                String regionCod = getMyRegionCode();//                System.out.println("Login Action Region Code" + regionCod);                if (userviewmodel.getRegioncode().trim().length() > 0) {                    request.getSession().setAttribute("regioncode", userviewmodel.getRegioncode());                    UserAction useraction = new UserAction();                     String currentusermodule = (String) request.getSession(false).getAttribute("currentusermodule");                    if (currentusermodule == null || currentusermodule.isEmpty() || currentusermodule.length() <= 0) {                        currentusermodule = "0";                    }                    Map typemap = useraction.getUserTypeSize(request, response);                    if (Integer.parseInt(typemap.get("typesize").toString()) == 1) {                        SessionFactory _factory = HibernateUtil.getSessionFactory();                        Session hibernate_session = _factory.openSession();                        Criteria rcCriteria = hibernate_session.createCriteria(Useroperatingrights.class);                        rcCriteria.add(Restrictions.sqlRestriction("userid = '" + userviewmodel.getUserid() + "'"));                        rcCriteria.add(Restrictions.sqlRestriction("accessright is true"));                        List rcList = rcCriteria.list();                        if (rcList.size() > 0) {                            Useroperatingrights userRightObj = (Useroperatingrights) rcList.get(0);                            currentusermodule = String.valueOf(userRightObj.getUsertypeid());                        }                        request.getSession(false).setAttribute("currentusermodule", currentusermodule);                        hibernate_session.close();                    }                      Map resultMap = new HashMap();                    UserViewModel userObj = (UserViewModel) request.getSession(false).getAttribute("userDetails");                    resultMap=EmployeeMasterServiceObj.getMenuDetails(null, request, response, null, null, userObj);                    request.getSession(false).setAttribute("menusHTML", resultMap.get("menuhtml").toString());                    if (typemap.get("isAccountModule").toString().equalsIgnoreCase("No")) {                            request.setAttribute("productHTML", useraction.getIndexProducts(userviewmodel.getUserid(), currentusermodule));                    }                                     return mapping.findForward("indexPage");//                    String regionCode = (String) request.getSession(false).getAttribute("regioncode");//                    System.out.println("Login Action Region Code" + regionCode);                } else {                    request.setAttribute("message", "Region not defined");                    return mapping.findForward("loginPage");                }            }        }    }    private HashMap getLoginDetailsMap(String userid, String password) {        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        String error = "";        UserViewModel userviewmodel = new UserViewModel();        HashMap loginMap = new LinkedHashMap();//        byte[] secreteKey = new byte[168];        byte[] secretekey = new byte[168];        byte[] existPassword = null;        String statusFlag = "N";        Transaction transaction = null;        try {            transaction = hibernate_session.beginTransaction();            java.sql.Date dbToDaysDate = new java.sql.Date(new Date().getTime());            String toDayDate = dateToString(dbToDaysDate);            String dateAndTime = getDateAndTime("yyyy-MM-dd hh:mm:ss");            Criteria umCrit = hibernate_session.createCriteria(Usermaster.class);            umCrit.add(Restrictions.eq("userid", userid));            List userMasterList = (ArrayList) umCrit.list();//            System.out.println("userMasterList===" + userMasterList.size());            Usermaster userMasterObj = new Usermaster();            if (userMasterList.size() > 0) {                userMasterObj = (Usermaster) userMasterList.get(0);//                System.out.println("sec key : " + userMasterObj.getSecretkey());                secretekey = CommonUtility.hexStringToByteArray(userMasterObj.getSecretkey());                existPassword = CommonUtility.hexStringToByteArray(userMasterObj.getEncryptpassword());                existPassword = CommonUtility.getPostgres9ByteaFormat(existPassword);//                System.out.println("existPassword = " + new String(existPassword));//                System.out.println("sec key1 : " + secretekey );//                secreteKey = userMasterObj.getSecretekey();//                existPassword = userMasterObj.getEncryptpassword();                Date nextPwdDate1 = userMasterObj.getNextpwddate();                String nextPwdDate = dateToString(nextPwdDate1);                String userstatus = String.valueOf(userMasterObj.getUserstatus());//                String userType = userMasterObj.getUsertype();                System.out.println("userid==" + userMasterObj.getUserid());//                System.out.println("usertype=="+userMasterObj.getUsertype());//                System.out.println("userstatusd=="+userMasterObj.getUserstatus());                //System.out.println(" secreteKey : "+secreteKey+" , existPassword : "+existPassword+" , userstatus : "+userstatus);                if (secretekey != null && secretekey.length > 0 && existPassword != null && existPassword.length > 0) {//                    if (userType != null || !userType.isEmpty()) {//                    if (userType != null || !userType.isEmpty() || userType.length() >= 0) {//                        if (userTypesCheck(userType)) {                    if (userstatus.equalsIgnoreCase(ApplicationConstants.DISABLED_STATUS)) {                        error = "The username or password you entered is incorrect";                    } else if (userstatus.equalsIgnoreCase(ApplicationConstants.DELETE_STATUS)) {                        error = "The username or password you entered is incorrect";                    } else {                        SecretKeySpec keyToBeUsed = new SecretKeySpec(secretekey, "DESede");                        String decryptPassword = decrypt(BinaryCodec.toAsciiString(existPassword), keyToBeUsed);//                                System.out.println(" decryptPassword : " + decryptPassword);                        if (decryptPassword.equals(password)) {                            /*                             * if                             * (DateUtility.DateLessThanOrEqual(nextPwdDate,                             * toDayDate) &&                             * !(userid.equalsIgnoreCase("Onward") ||                             * userid.equalsIgnoreCase("Admin")) ) {                             * error = "The username or password you                             * entered is incorrect"; } else {                             */                            if (userstatus.equalsIgnoreCase(ApplicationConstants.NEW_STATUS)                                    || (DateUtility.DateLessThanOrEqual(nextPwdDate, toDayDate) && !(userid.equalsIgnoreCase("Onward") || userid.equalsIgnoreCase("Admin")))) {                                statusFlag = "Y";                            }                            Logincount insertLoginCount = new Logincount();                            insertLoginCount.setUserid(userid);                            insertLoginCount.setCount(0);                            hibernate_session.update(insertLoginCount);                            userviewmodel.setUserid(userid);                            userviewmodel.setPassword(password);                            userviewmodel.setUsername(userMasterObj.getUsername());                            userviewmodel.setDateofbirth(dateToString(userMasterObj.getDateofbirth()));                            userviewmodel.setEmailid(userMasterObj.getEmailid());                            userviewmodel.setGender(userMasterObj.getGender());                            userviewmodel.setToDayDate(toDayDate);                            userviewmodel.setMobilenumber(userMasterObj.getMobilenumber());                            userviewmodel.setFirstName(userMasterObj.getUsername());//                                userviewmodel.setEncryptPassword(userMasterObj.getEncryptpassword());                            userviewmodel.setLogindate(dateAndTime);                            userviewmodel.setRegionname(CommonUtility.getRegion(hibernate_session, userMasterObj.getRegion()).getRegionname());                            userviewmodel.setRegioncode(userMasterObj.getRegion());//                                userviewmodel.setUsermasternew(userMasterObj);//                                    userviewmodel.setUsertype(userMasterObj.getUsertype());                            AppProps.getInstance().setToDayDate(toDayDate);                            loginMap.put("USERVM", userviewmodel);                            loginMap.put("MESSAGE", "SUCCESS");                            // }                        } else {                            int loginCount = 0;                            Criteria lcCrit = hibernate_session.createCriteria(Logincount.class);                            lcCrit.add(Restrictions.eq("userid", userid));                            List loginCountList = (ArrayList) lcCrit.list();                            Logincount loginCountObj = new Logincount();                            if (loginCountList.size() > 0) {                                loginCountObj = (Logincount) loginCountList.get(0);                                loginCount = loginCountObj.getCount() + 1;                                loginCountObj.setCount(loginCount);                                hibernate_session.update(loginCountObj);                            } else {                                loginCount = 1;                                Logincount insertLoginCount = new Logincount();                                insertLoginCount.setUserid(userid);                                insertLoginCount.setCount(loginCount);                                insertLoginCount.setLogindate(dbToDaysDate);                                insertLoginCount.setCreateddate(dbToDaysDate);                                hibernate_session.save(insertLoginCount);                            }                            if (loginCount == 1) {                                error = "The username or password you entered is incorrect";                            } else if (loginCount == 2) {                                error = "The username or password you entered is incorrect";                            } else if (loginCount == 3) {                                error = "The username or password you entered is incorrect";                            } else if (loginCount == 4) {                                error = "The username or password you entered is incorrect";                            } else if (loginCount > 4) {                                error = "5 ATTEMPTS COMPLETED. USER STATUS IS DISABLED.";                                userMasterObj.setUserstatus(3);                                hibernate_session.update(userMasterObj);                            }                        }                    }//                        } else {//                            // User Type status in correct.//                            error = "User Type status in correct. Please contanct Admin.";//                        }//                    } else {//                        // User Type null or empty.//                        error = "The username or password you entered is incorrect";//                    }                } else {                    // Secrete Key or Password null or empty.                    error = "The username or password you entered is incorrect";                }            } else {                // User id not available ins user master.                error = "The username or password you entered is incorrect";            }            transaction.commit();        } catch (Exception ex) {            //ex.printStackTrace();            if(transaction != null)  transaction.rollback();            error = ex.getMessage();        } finally {            hibernate_session.close();        }        loginMap.put("ERROR", error);        loginMap.put("statusFlag", statusFlag);        if (error != null && !error.isEmpty() && error.length() > 0) {            loginMap.put("MESSAGE", "FAILURE");        }        //System.out.println(" loginMap &&&&&&&&&&&&&&&&&&&&&&& : "+loginMap);        return loginMap;    }////    /**//     *//     * @param userid//     * @param password//     * @return//     *///    private HashMap getLoginDetailsMap(String userid, String password){//        SessionFactory _factory = HibernateUtil.getSessionFactory();//        Session hibernate_session = _factory.openSession();//        String error = "";//        UserViewModel userviewmodel = new UserViewModel();//        HashMap loginMap = new LinkedHashMap();//        byte[] secreteKey = new byte[168];//        byte[] existPassword = null;//        String statusFlag = "N";////        try {//            Transaction transaction = hibernate_session.beginTransaction();//            java.sql.Date dbToDaysDate = new java.sql.Date(new Date().getTime());//            String toDayDate = dateToString(dbToDaysDate);//            String dateAndTime = getDateAndTime("yyyy-MM-dd hh:mm:ss");////            Criteria umCrit = hibernate_session.createCriteria(com.onward.persistence.user.Usermaster.class);//            umCrit.add(Restrictions.eq("userid", userid));//            List userMasterList = (ArrayList) umCrit.list();//            System.out.println("userMasterList==="+userMasterList.size());//            Usermaster userMasterObj = new Usermaster();//            if (userMasterList.size() > 0) {//                userMasterObj = (Usermaster) userMasterList.get(0);//                secreteKey = userMasterObj.getSecretekey();//                existPassword = userMasterObj.getEncryptpassword();//                Date nextPwdDate1 = userMasterObj.getNextpwddate();//                String nextPwdDate = dateToString(nextPwdDate1);//                String userstatus = String.valueOf(userMasterObj.getUserstatus());//                String userType = userMasterObj.getUsertype();////                System.out.println("userType==="+userType);//                System.out.println(" secreteKey : "+secreteKey+" , existPassword : "+existPassword+" , userstatus : "+userstatus);//                if(secreteKey!=null && secreteKey.length>0 && existPassword!=null && existPassword.length>0){//                    if(userType!=null || !userType.isEmpty() || userType.length()>=0){//                        if(userTypesCheck(userType)){//                            if (userstatus.equalsIgnoreCase(ApplicationConstants.DISABLED_STATUS)) {//                                error = "The username or password you entered is incorrect";//                            } else if (userstatus.equalsIgnoreCase(ApplicationConstants.DELETE_STATUS)) {//                                error = "The username or password you entered is incorrect";//                            } else {//                                SecretKeySpec keyToBeUsed = new SecretKeySpec(secreteKey, "DESede");//                                String decryptPassword = decrypt(BinaryCodec.toAsciiString(existPassword), keyToBeUsed);//                                System.out.println(" decryptPassword : "+decryptPassword);////                                if (decryptPassword.equals(password)) {//                                    System.out.println("=========");//                                    /*if (DateUtility.DateLessThanOrEqual(nextPwdDate, toDayDate) && !(userid.equalsIgnoreCase("Onward") || userid.equalsIgnoreCase("Admin")) ) {//                                        error = "The username or password you entered is incorrect";//                                    } else {*///                                    if (userstatus.equalsIgnoreCase(ApplicationConstants.NEW_STATUS) ||//                                           (DateUtility.DateLessThanOrEqual(nextPwdDate, toDayDate) && !(userid.equalsIgnoreCase("Onward") || userid.equalsIgnoreCase("Admin"))) ) {//                                        statusFlag = "Y";//                                    }//                                    Logincount insertLoginCount = new Logincount();//                                    insertLoginCount.setUserid(userid);//                                    insertLoginCount.setCount(0);//                                    hibernate_session.update(insertLoginCount);////                                    userviewmodel.setUserid(userid);//                                    userviewmodel.setPassword(password);//                                    userviewmodel.setUsername(userMasterObj.getUsername());//                                    userviewmodel.setDateofbirth(dateToString(userMasterObj.getDateofbirth()));//                                    userviewmodel.setEmailid(userMasterObj.getEmailid());//                                    userviewmodel.setGender(userMasterObj.getGender());//                                    userviewmodel.setToDayDate(toDayDate);//                                    userviewmodel.setMobilenumber(userMasterObj.getMobilenumber());//                                    userviewmodel.setFirstName(userMasterObj.getUsername());//                                    userviewmodel.setEncryptPassword(userMasterObj.getEncryptpassword());//                                    userviewmodel.setLogindate(dateAndTime);//                                    userviewmodel.setUsermaster(userMasterObj);//                                    userviewmodel.setUsertype(userMasterObj.getUsertype());////                                    AppProps.getInstance().setToDayDate(toDayDate);//                                    loginMap.put("USERVM", userviewmodel);//                                    loginMap.put("MESSAGE", "SUCCESS");//                                    //}//                                } else{//                                    int loginCount = 0;//                                    Criteria lcCrit = hibernate_session.createCriteria(com.onward.persistence.user.Logincount.class);//                                    lcCrit.add(Restrictions.eq("userid", userid));//                                    List loginCountList = (ArrayList) lcCrit.list();//                                    Logincount loginCountObj = new Logincount();//                                    if (loginCountList.size() > 0) {//                                        loginCountObj = (Logincount) loginCountList.get(0);//                                        loginCount = loginCountObj.getCount() + 1;////                                        loginCountObj.setCount(loginCount);//                                        hibernate_session.update(loginCountObj);//                                    } else{//                                        loginCount = 1;////                                        Logincount insertLoginCount = new Logincount();//                                        insertLoginCount.setUserid(userid);//                                        insertLoginCount.setCount(loginCount);//                                        insertLoginCount.setLogindate(dbToDaysDate);//                                        insertLoginCount.setCreateddate(dbToDaysDate);//                                        hibernate_session.save(insertLoginCount);//                                    }////                                    if (loginCount == 1) {//                                        error = "The username or password you entered is incorrect";//                                    } else if (loginCount == 2) {//                                        error = "The username or password you entered is incorrect";//                                    } else if (loginCount == 3) {//                                        error = "The username or password you entered is incorrect";//                                    } else if (loginCount == 4) {//                                        error = "The username or password you entered is incorrect";//                                    } else if (loginCount > 4) {//                                        error = "5 ATTEMPTS COMPLETED. USER STATUS IS DISABLED.";////                                        userMasterObj.setUserstatus(3);//                                        hibernate_session.update(userMasterObj);//                                    }//                                }//                            }//                        } else {//                            // User Type status in correct.//                            error = "User Type status in correct. Please contanct Admin.";//                        }//                    } else{//                        // User Type null or empty.//                        error = "The username or password you entered is incorrect";//                    }//                } else{//                    // Secrete Key or Password null or empty.//                    error = "The username or password you entered is incorrect";//                }//            } else{//                // User id not available ins user master.//                error = "The username or password you entered is incorrect";//            }////            transaction.commit();//        } catch (Exception ex) {//            ex.printStackTrace();//            error = ex.getMessage();//        } finally {//            hibernate_session.close();//        }////        loginMap.put("ERROR", error);//        loginMap.put("statusFlag", statusFlag);//        if(error!=null && !error.isEmpty() && error.length()>0)//            loginMap.put("MESSAGE", "FAILURE");//        //System.out.println(" loginMap &&&&&&&&&&&&&&&&&&&&&&& : "+loginMap);//        return loginMap;//    }    /**     *     * @param funType     * @param accountNumber     * @return     */    public Map isUserIdExist(String userId) {        Map isUserExistMap = new LinkedHashMap();        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        try {            Criteria amCrit = hibernate_session.createCriteria(Usermaster.class);            amCrit.add(Restrictions.sqlRestriction(" userid = '" + userId + "' "));            List accMasterList = (ArrayList) amCrit.list();            if (accMasterList.size() > 0) {                isUserExistMap.put("ERROR", "Entered Userid already present");            } else {                isUserExistMap.put("userid", userId);            }        } catch (Exception ex) {            isUserExistMap.put("ERROR", ex.getMessage());        } finally {            hibernate_session.close();        }        return isUserExistMap;    }    /**     *     * @param mapping     * @param form     * @param request     * @param response     * @return     * @throws java.lang.Exception     */    public ActionForward submitForgotPassword(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        byte[] encryptPassword = null;        byte[] encryptPasswordKey = null;        Transaction transaction = null;        try {            transaction = hibernate_session.beginTransaction();            java.sql.Date dbToDaysDate = new java.sql.Date(new Date().getTime());            String dateAndTime = getDateAndTime("dd MMMMM yyyy 'at' hh:mm:ss aaa");            DynaValidatorForm formObj = (DynaValidatorForm) form;            String userid = (formObj.get("forgotuserid").toString());            String password = (formObj.get("newpassword").toString());            //System.out.println(" userid : "+userid+" , password : "+password);            String secQusOne = (formObj.get("secretquestionone").toString());            String secQusTwo = (formObj.get("secretquestiontwo").toString());            String YourAnsOne = (formObj.get("youranswerone").toString());            String YourAnsTwo = (formObj.get("youranswertwo").toString());            String emailId = (formObj.get("emailid").toString());            String dateofbirth = (formObj.get("dateofbirth").toString());            //System.out.println(" secQusOne : "+secQusOne+" , secQusTwo : "+secQusTwo+" , YourAnsOne : "+YourAnsOne+" , YourAnsTwo : "+YourAnsTwo+" , emailId : "+emailId);            Criteria umCrit = hibernate_session.createCriteria(Usermaster.class);            umCrit.add(Restrictions.eq("userid", userid));            List userMasterList = (ArrayList) umCrit.list();            Usermaster userMasterObj = new Usermaster();            if (userMasterList.size() > 0) {                userMasterObj = (Usermaster) userMasterList.get(0);                String existEmailid = userMasterObj.getEmailid();                String nextPwdDate = dateToString(userMasterObj.getNextpwddate());                int seqNumber = userMasterObj.getSequencenumber();                seqNumber = seqNumber + 1;                String existSecQusOne = userMasterObj.getSecretquestionone();                String existSecQusTwo = userMasterObj.getSecretquestiontwo();                String existYourAnsOne = userMasterObj.getYouranswerone();                String existYourAnsTwo = userMasterObj.getYouranswertwo();                //System.out.println(" existSecQusOne : "+existSecQusOne+" , existSecQusTwo : "+existSecQusTwo+" , existYourAnsOne : "+existYourAnsOne+" , existYourAnsTwo : "+existYourAnsTwo+" , existEmailid : "+existEmailid);                if (secQusOne.equalsIgnoreCase(existSecQusOne)                        && secQusTwo.equalsIgnoreCase(existSecQusTwo)                        && YourAnsOne.equalsIgnoreCase(existYourAnsOne)                        && YourAnsTwo.equalsIgnoreCase(existYourAnsTwo)                        && emailId.equalsIgnoreCase(existEmailid)) {                    // Encrypt the Password                    KeyGenerator keyGenerator = KeyGenerator.getInstance("DESede");                    if (keyGenerator != null) {                        keyGenerator.init(112);                        key1 = keyGenerator.generateKey();                        encryptPasswordKey = key1.getEncoded();                    }                    Cipher cipher = Cipher.getInstance("DESede/ECB/PKCS5Padding");                    cipher.init(Cipher.ENCRYPT_MODE, key1);                    encryptPassword = cipher.doFinal(password.getBytes());                    userMasterObj.setNextpwddate(postgresDate(DateUtility.addToDate(nextPwdDate, Calendar.YEAR, 1)));                    userMasterObj.setSequencenumber(seqNumber);//                    userMasterObj.setEncryptpassword(encryptPassword);//                    userMasterObj.setSecretekey(encryptPasswordKey);                    userMasterObj.setEncryptpassword(CommonUtility.convertByteToHexString(encryptPassword));                    userMasterObj.setSecretkey(CommonUtility.convertByteToHexString(encryptPasswordKey));                    hibernate_session.save(userMasterObj);                    Passwordhistory passwordhistory = new Passwordhistory();                    passwordhistory.setId(new PasswordhistoryId(userid, seqNumber));                    passwordhistory.setCreatedby(userid);                    passwordhistory.setCreateddate(dbToDaysDate);                    BeanUtils.copyProperties(passwordhistory, userMasterObj);                    hibernate_session.save(passwordhistory);                    request.setAttribute("message", "Sucessfully Changed Your Password");                } else {                    request.setAttribute("message", "Authentication Fail");                }            } else {                request.setAttribute("message", "The username you entered is incorrect");            }            transaction.commit();        } catch (Exception ex) {            ex.printStackTrace();            if(transaction != null)  transaction.rollback();                        request.setAttribute("message", ex.getMessage());        } finally {            hibernate_session.close();        }        return mapping.findForward("loginPage");    }    /**     *     * @param userType     * @return     */    private boolean userTypesCheck(String userType) {        boolean flag = false;        if (userType.equalsIgnoreCase("0")) {            flag = true;        } else {            SessionFactory _factory = HibernateUtil.getSessionFactory();            Session hibernate_session = _factory.openSession();            Criteria empRegionCrit = hibernate_session.createCriteria(Usertype.class);            empRegionCrit.add(Restrictions.sqlRestriction("id=" + Integer.parseInt(userType)));            List empRegionList = empRegionCrit.list();            if (empRegionList.size() > 0) {                flag = true;            }        }        return flag;    }    /**     *     * @return     */    private String getTamil() {        String applicationlocal = "";        try {            OnwardDAO onwarddao = new OnwardDAO();            Connection connection = onwarddao.getConnection();            StringBuffer sb = new StringBuffer();            sb.append(" SELECT cardid, applicationnumber, keycardnumber, doorno, olddoorno, ");            sb.append(" applicationlocal, districtid, districtnameinlocal, tehsilid, ");            sb.append(" talukcode, tehsilnameinlocal, placeid, placecode, placenamelocal, ");            sb.append(" shopid, shopcode, shopnamelocal, streetid, streetcode, streetnameinlocal, ");            sb.append(" wardnumber, aregisternumber ");            sb.append(" FROM samplecard order by cardid ");            PreparedStatement pstmt = connection.prepareStatement(sb.toString());            ResultSet rs = pstmt.executeQuery();            if (rs.next()) {                String cardid = rs.getString("cardid");                applicationlocal = rs.getString("applicationlocal");                System.out.println(" applicationlocal : " + applicationlocal);                String uniCodeValue = uniCodeConverter(applicationlocal);                System.out.println(" uniCodeValue : " + uniCodeValue);            }            onwarddao.closeConnection(null, rs, pstmt);        } catch (SQLException ex) {            Logger.getLogger(LoginAction.class.getName()).log(Level.SEVERE, null, ex);        }        return applicationlocal;    }    /**     *     * @param original     * @return     */    private String uniCodeConverter(String original) {        //System.out.println(System.getProperty("file.encoding"));        StringBuffer finalOutPut = new StringBuffer();        try {            byte[] utf8Bytes = original.getBytes("UTF8");            for (int k = 0; k < utf8Bytes.length; k++) {                String value = "\\u00" + UnicodeFormatter.byteToHex(utf8Bytes[k]);                finalOutPut.append(value);            }        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        return finalOutPut.toString();    }    public String getMyRegionCode() {        String regionCode = "";        SessionFactory _factory = HibernateUtil.getSessionFactory();        Session hibernate_session = _factory.openSession();        Criteria empRegionCrit = hibernate_session.createCriteria(Regionmaster.class);        empRegionCrit.add(Restrictions.sqlRestriction("defaultregion is true"));        List empRegionList = empRegionCrit.list();        if (empRegionList.size() > 0) {            Regionmaster regionmasterObj = (Regionmaster) empRegionList.get(0);            regionCode = regionmasterObj.getId();        }        hibernate_session.close();        return regionCode;    }//        public Map setFinacialYearStatus(String fyearvalue,HttpServletRequest request, HttpServletResponse response) {//        Map resultMap = new HashMap();//        if (!fyearvalue.equalsIgnoreCase("0")) {//            request.getSession(false).removeAttribute("financialYear");//            request.getSession(false).setAttribute("financialYear", fyearvalue);//            resultMap.put("success", "success");//        }//        return resultMap;//    }    }